MyPrompt - Updates

app.py/index
1. Implement error handling to manage exceptions and return appropriate HTTP status codes.
2. Add logging to track requests and responses for better debugging and monitoring.
3. Use a templating engine to render dynamic HTML content instead of returning plain text.

1. Implement error handling to manage unexpected issues gracefully.  
2. Add logging to track requests and responses for better debugging.  
3. Include a more detailed welcome message with application features or usage instructions.  

api.py/optimize_prompt
1. Implement input validation to sanitize and validate `user_request` to prevent injection attacks or malformed data.
2. Enhance error handling to provide more specific feedback for different failure scenarios, improving user experience.
3. Add logging for API calls and responses to facilitate debugging and monitor usage patterns.

frontend-vite/src/App.jsx/app
1. Add input validation to ensure `userRequest` is not empty before making the API call.
2. Implement a loading spinner or message to enhance user experience during the loading state.
3. Display error messages in a user-friendly format, possibly using a modal or toast notification.

